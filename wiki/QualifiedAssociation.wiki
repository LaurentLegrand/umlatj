= Overview =

...

= Usage =

A QualifiedAssociation is declared the same way as a [Association binary association].

The description of the qualifier (the attribute used to qualify the association) is done at the 
[Property] declaration level by using the `qualified` attribute of the `org.umlatj.Property` annotation.  

= Sample =

For instance, a association between a (db) Table and a Column qualified by the Column name will be 
represented in Java by a `java.util.Map` in the Table class. 

The value of the qualifier attribute must correspond to a property of the Column class.

== Implementation ==

=== Table.java ===
{{{
package wiki;

import java.util.HashMap;
import java.util.Map;

import org.umlatj.kernel.Classifier;
import org.umlatj.kernel.Property;


@Classifier
public class Table {
	
	@Property(qualifier = "name")
	Map<String, Column> columns = new HashMap<String, Column>();
	
}
}}}

=== Column.java ===
{{{
package wiki;

import org.umlatj.kernel.Classifier;
import org.umlatj.kernel.Property;

@Classifier
public class Column {

	@Property
	private String name;
	
	@Property
	Table table;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
}
}}}

=== QualifiedAssociation.java === 

The Package declaration:

{{{
package wiki;

import org.umlatj.kernel.Association;
import org.umlatj.kernel.Package;
import org.umlatj.kernel.Association.Binary;
import org.umlatj.kernel.Association.End;

@Package
public class QualifiedAssociation {

	@Association( { @End("table"), @End("columns") })
	Binary<Table, Column> tableContainsColumns;

	public Binary<Table, Column> getTableContainsColumns() {
		return tableContainsColumns;
	}

}
}}}

= Runtime expectations =

At runtime, the value of the qualifier attribute will be used as the key in the map..

For instance :

 {{{
package wiki;

import org.junit.Assert;
import org.junit.Test;

public class QualifiedAssociationTest {
	
	@Test
	public void test() {
		Table table = new Table();
		Column column = new Column();
		column.setName("col");
		
		// create links 
		new QualifiedAssociation().getTableContainsColumns().add(table, column);
		
		Assert.assertTrue(table.columns.containsKey(column.getName()));
		Assert.assertEquals(table.columns.get(column.getName()), column);
	}

}
 }}}

